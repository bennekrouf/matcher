syntax = "proto3";
package matcher;

service Matcher {
    rpc MatchQuery (MatchRequest) returns (MatchResponse) {}
    rpc InteractiveMatch (stream InteractiveRequest) returns (stream InteractiveResponse) {}
}

message MatchRequest {
    string query = 1;
    string language = 2;
    bool debug = 3;
    bool show_all_matches = 4;
}

message MatchResponse {
    repeated EndpointMatch matches = 1;
    double score = 2;
    bool has_matches = 3;
}

message ParameterInfo {
    string name = 1;
    string description = 2;
    bool required = 3;
}

message EndpointMatch {
    string endpoint_id = 1;
    double similarity = 2;
    map<string, string> parameters = 3;
    bool is_negated = 4;
    repeated ParameterInfo missing_required = 5;
    repeated ParameterInfo missing_optional = 6;
}

message InteractiveRequest {
    oneof request {
        InitialQuery initial_query = 1;
        ParameterValue parameter_value = 2;
        ConfirmationResponse confirmation_response = 3;
    }
}

message InitialQuery {
    string query = 1;
    string language = 2;
}

message ParameterValue {
    string parameter_name = 1;
    string value = 2;
}

message ConfirmationResponse {
    bool confirmed = 1;
}

message InteractiveResponse {
    oneof response {
        MatchResponse match_result = 1;
        ParameterPrompt parameter_prompt = 2;
        ConfirmationPrompt confirmation_prompt = 3;
        ParameterAccepted parameter_accepted = 4;
    }
}

message ParameterPrompt {
    string parameter_name = 1;
    string description = 2;
    bool required = 3;
    string endpoint_id = 4;
}

message ConfirmationPrompt {
    EndpointMatch matched_endpoint = 1;
}

message ParameterAccepted {
    string parameter_name = 1;
    string message = 2;
}
