name: CI/CD
on:
  push:
    branches: [ '**' ]
  pull_request:
    branches: [ '**' ]

jobs:
  build-and-test:
    name: Build, Test, and Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install Protobuf Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Check formatting
        run: cargo fmt -- --check
      
      - name: Clippy
        run: cargo clippy -- -D warnings
      
      - name: Build Release Binary
        run: cargo build --release
      
      # Add cache step for interactive tests dependencies
      - name: Cache interactive tests dependencies
        uses: actions/cache@v3
        with:
          path: |
            tests/interactive/target
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-interactive-${{ hashFiles('tests/interactive/Cargo.lock', 'tests/interactive/Cargo.toml') }}

      - name: Build interactive tests
        run: |
          cd tests/interactive
          cargo build

      - name: Run interactive tests
        run: |
          cd tests/interactive
          cargo run -- --test
      
      # Upload the built binary as an artifact
      - name: Upload Binary
        uses: actions/upload-artifact@v3
        with:
          name: matcher-binary
          path: target/release/matcher

  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: build-and-test
    steps:
      - uses: actions/checkout@v3

      # Set branch name with a default value
      - name: Extract branch name
        shell: bash
        run: |
          echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')" >> $GITHUB_ENV
          echo "Using branch name: $BRANCH_NAME"
        id: extract_branch

      # Create staging directory
      - name: Create build directory
        run: mkdir -p docker_build

      # Download binary to staging directory
      - name: Download Binary
        uses: actions/download-artifact@v3
        with:
          name: matcher-binary
          path: docker_build/

      # Setup Docker and Docker Compose
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Set up Docker Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          version: v2.23.0

      # Copy other required files
      - name: Copy required files
        run: |
          cp config/endpoints.yaml docker_build/
          cp docker-entrypoint.sh docker_build/
          chmod +x docker_build/matcher

      # Create Dockerfile in staging directory
      - name: Create Dockerfile
        run: |
          cat > docker_build/Dockerfile << 'EOF'
          FROM debian:bookworm-slim
          RUN apt-get update && \
              apt-get install -y \
              ca-certificates \
              libssl3 \
              curl \
              tini \
              && rm -rf /var/lib/apt/lists/*
          WORKDIR /app
          RUN mkdir -p /app/models/multilingual-MiniLM /app/data/mydb /app/logs
          COPY matcher /app/matcher
          COPY endpoints.yaml /app/endpoints.yaml
          COPY docker-entrypoint.sh /app/
          RUN chmod +x /app/matcher /app/docker-entrypoint.sh && \
              curl -L https://huggingface.co/sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2/resolve/main/config.json -o /app/models/multilingual-MiniLM/config.json && \
              curl -L https://huggingface.co/sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2/resolve/main/tokenizer.json -o /app/models/multilingual-MiniLM/tokenizer.json && \
              curl -L https://huggingface.co/sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2/resolve/main/pytorch_model.bin -o /app/models/multilingual-MiniLM/model.ot && \
              chmod -R 777 /app/data /app/logs
          EXPOSE 50030
          ENTRYPOINT ["/usr/bin/tini", "--"]
          CMD ["/app/docker-entrypoint.sh"]
          EOF

      # Build from staging directory with explicit tag
      - name: Build Docker image
        run: |
          cd docker_build
          docker build -t api-matcher:${BRANCH_NAME:-dev} .
          cd ..

      # Start containers
      - name: Start containers
        run: docker-compose -f docker-compose.test.yml up -d

      # Rest of your steps remain the same...      - name: Run integration tests
      - name: Run tests
        run: |
          cd tests/interactive
          cargo run -- --test

      - name: Show logs on failure
        if: failure()
        run: docker-compose -f docker-compose.test.yml logs

      - name: Stop containers
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: docker
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3

      - name: Download Binary
        uses: actions/download-artifact@v3
        with:
          name: matcher-binary
          path: target/release/

      - name: Make binary executable
        run: chmod +x target/release/matcher

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/api-matcher
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile.runtime
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: publish
    if: always()
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'api-matcher'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
