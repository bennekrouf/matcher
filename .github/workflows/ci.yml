name: CI/CD

on:
  push:
    branches: [ '**' ]  # Match all branches
  pull_request:
    branches: [ '**' ]  # Match all branches

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install Protobuf Compiler
        run: sudo apt-get update && sudo apt-get install -y protobuf-compiler libprotobuf-dev

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy, rustfmt

      # Install Docker Compose
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.31.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Check protoc version
        run: protoc --version

      - name: Check formatting
        run: cargo fmt -- --check

      - name: Clippy
        run: cargo clippy -- -D warnings

      - name: Run tests
        run: cargo test

      - name: Run integration tests
        run: |
          cd tests/interactive
          cargo test

  docker:
    name: Docker Build and Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Extract branch name
        shell: bash
        run: echo "BRANCH_NAME=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')" >> $GITHUB_ENV
        id: extract_branch

      - name: Build and export
        uses: docker/build-push-action@v4
        with:
          context: .
          load: true
          tags: api-matcher:${{ env.BRANCH_NAME }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Start containers
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 10  # Wait for services to be ready

      - name: Run integration tests
        run: |
          cd tests/interactive
          cargo run -- --test

      - name: Show logs on failure
        if: failure()
        run: docker-compose -f docker-compose.test.yml logs

      - name: Stop containers
        if: always()
        run: docker-compose -f docker-compose.test.yml down -v

  publish:
    name: Publish
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.event_name == 'push'  # Run on all pushes
    steps:
      - uses: actions/checkout@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/api-matcher
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main' }}

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: publish
    if: always()
    steps:
      - name: Delete old container images
        uses: actions/delete-package-versions@v4
        with:
          package-name: 'api-matcher'
          min-versions-to-keep: 10
          delete-only-untagged-versions: true
